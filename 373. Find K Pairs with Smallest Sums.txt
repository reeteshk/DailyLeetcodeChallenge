373. Find K Pairs with Smallest Sums
Medium
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 105
-109 <= nums1[i], nums2[i] <= 109
nums1 and nums2 both are sorted in ascending order.
1 <= k <= 104


Solution
Approach 1: Heap

Intuition

import java.util.*;
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        
        int len1=nums1.length;
        int len2=nums2.length;
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->(a[0]-b[0]));
        HashSet<Pair<Integer,Integer>>hs=new HashSet<>();
        List<List<Integer>>ans=new ArrayList<>();
        int i,j;
        pq.add(new int[]{nums1[0]+nums2[0],0,0});
        hs.add(new Pair<Integer,Integer>(0,0));
        while(!pq.isEmpty() && k-->0)
        {
            int []min=pq.remove();
            i=min[1];
            j=min[2];
            ans.add(Arrays.asList(nums1[i],nums2[j]));
            if(i<len1-1 && !hs.contains(new Pair<Integer,Integer>(i+1,j)))
            {
                pq.add(new int[]{nums1[i+1]+nums2[j],i+1,j});
                hs.add(new Pair<Integer,Integer>(i+1,j));
            }
            if(j<len2-1 && !hs.contains(new Pair<Integer,Integer>(i,j+1)))
            {
                pq.add(new int[]{nums1[i]+nums2[j+1],i,j+1});
                hs.add(new Pair<Integer,Integer>(i,j+1));
            }
        }
        return ans;
         
    }
}